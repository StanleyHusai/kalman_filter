#include "kalman_filter.h"
#include <iostream>
#include <eigen3/Eigen/Dense>

using namespace std;

int main() {
        int m = 1;
        cout << m << endl;
        double m_x = 0.0, m_y = 0.0;
        double delta_t = 1.0;
        kalman_filter kf;
        
        Eigen::VectorXd x_in(4,1);
        x_in << m_x, m_y, 0.0, 0.0;
        kf.Initialization(x_in);
        
        Eigen::MatrixXd P_in(4,4);
        P_in << 1.0, 0.0, 0.0, 0.0,
                0.0, 1.0, 0.0, 0.0,
                0.0, 0.0, 100.0, 0.0,
                0.0, 0.0, 0.0, 100.0;
        kf.SetP(P_in);

        Eigen::MatrixXd Q_in(4,4);
        Q_in << 1.0, 0.0, 0.0, 0.0,
                0.0, 1.0, 0.0, 0.0,
                0.0, 0.0, 1.0, 0.0,
                0.0, 0.0, 0.0, 1.0;
        kf.SetQ(Q_in);

        Eigen::MatrixXd H_in(1,4);
        H_in << 1.0, 0.0, 0.0, 0.0;
        kf.SetH(H_in);

        Eigen::MatrixXd R_in(2,2);
        R_in << 0.0225, 0.0,
                0.0, 0.0225;
        kf.SetR(R_in);

        Eigen::MatrixXd F_in(4,4);
        F_in << 1.0, 0.0, delta_t, 0.0,
                0.0, 1.0, 0.0, delta_t,
                0.0, 0.0, 1.0, 0.0,
                0.0, 0.0, 0.0, 1.0;
        kf.SetF(F_in);
        
        std::vector<double> measurements = {
        1.04202710058,  1.10726790452,  1.2913511148,    1.48485250951,
        1.72825901034,  1.74216489744,  2.11672039768,   2.14529225112,
        2.16029641405,  2.21269371128,  2.57709350237,   2.6682215744,
        2.51641839428,  2.76034056782,  2.88131780617,   2.88373786518,
        2.9448468727,   2.82866600131,  3.0006601946,    3.12920591669,
        2.858361783,    2.83808170354,  2.68975330958,   2.66533185589,
        2.81613499531,  2.81003612051,  2.88321849354,   2.69789264832,
        2.4342229249,   2.23464791825,  2.30278776224,   2.02069770395,
        1.94393985809,  1.82498398739,  1.52526230354,   1.86967808173,
        1.18073207847,  1.10729605087,  0.916168349913,  0.678547664519,
        0.562381751596, 0.355468474885, -0.155607486619, -0.287198661013,
        -0.602973173813};

        Eigen::VectorXd z(m);
        for(size_t i = 0; i < measurements.size(); i++) {
                kf.Prediction();
                z << measurements[i];
                kf.Update(z);
        }
        kf.GetX();
}